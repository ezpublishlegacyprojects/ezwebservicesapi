eZ Webservices API extension for eZ publish
===================================

An extension aiming to expose via webservice calls (XMLRPC, JSONRPC, SOAP, AJAX)
all existing eZ Publish functionality, starting with
- fetch functions
- standard module views

Please note that SOAP support is not available as of release 0.1


License
=======
GNU General Public License v2.0


Requirements
============
o  eZ publish version: Make sure you use eZ publish version 4.0 or higher.
o  Web Server/Database/PHP version: as indicated in your eZ publish version requirements
o  Web Browser: no specific requirements
o  ggwebservices extension, version 0.4 or later
o  to receive jsonrpc calls, the php JSON extension is needed
o  to receive xmlrpc calls, the php XMLRPC extension is needed
o  the ezjscore extension is recommended for receiving ajax calls


Installation
============
1. Make sure the ggwebservices extension is present and active.
   While at it, please read the documentation that comes with it.

2. Standard eZ Publish extension installation method:
   - copy the files from the zip under the extension directory
   - activate the extension either via the admin interface or by editing
     site.ini.append.php + regenerating autoloads

3. Assign access policies to grant execution permissions on the desired
   webservices to those user roles that will be accessing them:
   module: webservices
   function: execute
   limitation: it is possible to limit execution by single webservice


Usage
=====
Having enabled this extension, a lot of webservices will be available on your
eZ Publish installation.

The supported protocols are, as of the current version, XMLRPC and JSONRPC.
Ajax calls from the eZ Publish web pages of the server itself are supported via
the $.jsonrpc (jquery) and Y.io.jsonrpc (yui) javascript functions that come
bundled in the ggwebservices extension.

The exact list of webservices will depend on the extensions you have enabled,
including:
- two generic webservices: ezp.viewall and ezp.fetchall
- one webservice for every fetch function: ezp.fetch.class.attribute_list etc...
- one webservice for every module view: ezp.view.collaboration.view etc...

[Tip: using the ggsysinfo extension, you can find out the complete list of views
and fetch functions available in your installation.]

The parameters of these webservices are the same that are used from the standard
eZ Publish API detailed in the online doc at
http://ez.no/doc/ez_publish/technical_manual/4_x/reference/template_fetch_functions
http://ez.no/doc/ez_publish/technical_manual/4_x/reference/modules

For fetch functions, the signature is:

mixed $result = ezp.fetch.$module.$fetch_function(
  struct $params,              // where all the (named) parameters for the fetch functions are stored
  [array $output_filter,]      // optional filter to decide which fields to remove in the fetched objects
  [int $output_encoding_level] // optional filter to decide the level of recursion used to encode the fetched objects
)

The result is the same that you would get when calling the fetch function in a template,
which means in general an array of objects.

For module views, the signature is:

mixed $result = ezp.view.$module.$view(
  struct $options,                // extra options. supported options:
                                     'return_type' 1 for returning the variables normally passed to the template, 2 for template results
  [mixed $view_parameter]*,       // the ordered parameters, as declared in the view definition in module.php
  [struct $unordered_parameters], // the unordered parameters, as declared in the view definition in module.php
  [struct $post_parameters]       // any parameters that would have been sent as POST variable
)

The result depends on the value correspoding to the 'return_type' key in the $options parameter:
1 - the webservice will return the variables that are normally passed to the template used to render the view
2 - the webservice will return (as string) the result of executing the template associated with the view
Note that due to the way the eZ Publish kernel works, the view template is always executed even when passing 'return_type' = 1

Plus the two generic webservices:

mixed $result = ezp.fetchall(
  string $module,              // name of the module
  string $fetch_function,      // name of the fetch function
  [struct $params,]            // where all the (named) parameters for the fetch functions are stored
  [array $output_filter,]      // optional filter to decide which fields to remove in the fetched objects
  [int $output_encoding_level] // optional filter to decide the level of recursion used to encode the fetched objects
)

mixed $result = ezp.viewall(
  string $module,                 // name of the module
  string $fetch_function,         // name of the fetch function
  [struct $options],              // extra options. supported options:
                                     'return_type' 1 for returning the variables normally passed to the template, 2 for template results (default is 1)
  [mixed $view_parameter]*,       // the ordered parameters, as declared in the view definition in module.php
  [struct $unordered_parameters], // the unordered parameters, as declared in the view definition in module.php
  [struct $post_parameters]       // any parameters that would have been sent as POST variable
)

These webservices  are meant to give a role a single permission that will allow
him to execute any view or fetch function.
In the future there will be support for allowing a user to call ezp.viewall and
let the extension check if he has access to the actual module/view being executed.

The URLs to be used to access the webservices are:

http://ezp.server/etc/index.php/siteaccess/webservices/execute/jsonrpc
http://ezp.server/etc/index.php/siteaccess/webservices/execute/xmlrpc

(alternatively, some optimized controller file can be put in place. Read the
documentation of ggwebservices for more details)

The ggwebservices extension includes a graphical debugger that can be used to
discover / test the new webservices. It is available in the administration
interface of eZ Publish in the 'WS Debugger' tab.

Last but not least: the list of existing module views and fetch functions is cached
by this extension, so that it has not to be reaclculated upon every invocation
of a webservice. After activating extensions, this cache should be rebuilt, for
the new views and fetch functions (if any) to appear as websevices.
- if running on eZ Publish 4.3 or later, this can be done in the administration interface
- if running on eZ Publish 4.2 or later, the directory
  var/siteaccess/cache/ezwebservicesapi
  will have to be cleaned by hand


Troubleshooting
===============
For more documentation look under doc/
