eZ Webservices API extension for eZ Publish
===========================================

An extension aiming to expose via webservice calls (XMLRPC, JSONRPC, EZJSCORE,
one day even SOAP) all existing eZ Publish functionality, starting with
- fetch functions
- module views
- module operations

Please note that SOAP support is still not available as of release 0.4


License
=======
GNU General Public License v2.0


Requirements
============
o  eZ publish version: Make sure you use eZ publish version 4.0 or higher.
o  Web Server/Database/PHP version: as indicated in your eZ publish version requirements
o  Web Browser: no specific requirements
o  at least one of the ggwebservices, version 0.6 or later, or ezjscore extensions
o  to receive or make jsonrpc calls, ggwebservices and the php JSON extension is needed
o  to receive or make xmlrpc calls, ggwebservices and the php XMLRPC extension is needed
o  the ezjscore extension is recommended for receiving ajax calls
o  the ezpersistentobject_inspector extension is required to enable the ezp.inspect
   webservice (used by the ezdebug extension). It is also recommended for adding
   more detailed descriptions of the available webservices (the description can
   be seen viaexecution of a system.methodHelp method call in xmlrpc/jsonrpc,
   using eg. the debugger provided by the ggwebservices extension)


Installation
============
1. Make sure either the ggwebservices or ezjscore extensions (or both) are
   present and active.
   While at it, please read the documentation that comes with them.

2. Standard eZ Publish extension installation method:
   - copy the files from the zip in the "extension" directory
   - activate the extension either via the Administration Interface or by editing
     site.ini.append.php + regenerating autoloads via cli script

3. Assign access policies to grant execution permissions on the desired
   webservices to those user roles that will be accessing them:
   - for ggwebservice calls (xmlrpc/jsonrpc):
     module: webservices
     function: execute
     limitation: it is possible to limit execution by single webservice
   - for ezjscore calls (ajax):
     module: ezwebservicesapi
     function: execute
     limitation: it is possible to limit execution by single webservice

IMPORTANT: when calling webservices that execute module operations, a lot of the
native eZ Publish access control policies are bypassed, as normally it is the
role of the view to check access permissions. Take care when giving any user
access to an ezp.operation.... webservice.


Usage
=====
Having enabled this extension, a lot of webservices will be available on your
eZ Publish installation.

The supported protocols are, as of the current version, XMLRPC and JSONRPC and
EZJSCORE.

Ajax calls from the eZ Publish web pages of the server itself are supported
via the $.jsonrpc (jquery) and Y.io.jsonrpc (yui) javascript functions that come
bundled in the ggwebservices extension and, of course, via the $.ez and Y.io.ez
javascript functions that come bundled in the ezjscore extension.

The exact list of webservices will depend on all the modules you have enabled,
and will include:
- three generic webservices: ezp.viewall, ezp.fetchall, ezp.operationall
  (NB: these ones are not available as ezjscore calls)
- one webservice for every fetch function. eg: ezp.fetch.class.attribute_list
- one webservice for every module view. eg: ezp.view.collaboration.view
- one webservice for every module operation. eg: ezp.operation.content.hide

[Tip: using the ggsysinfo extension, you can find out the complete list of views,
fetch functions and operations available in every module in your installation.]

The parameters of these webservices are the same that are used from the standard
eZ Publish API detailed in the online doc at
http://doc.ez.no/eZ-Publish/Technical-manual/4.x/Reference/Modules

Some sample call payloads are described in the doc/sample_calls.txt document.

For fetch functions, the signature is:

mixed $result = ezp.fetch.$module.$fetch_function(
  struct $params,              // where all the (named) parameters for the fetch functions are stored
  [array $output_filter,]      // optional filter to decide which fields to remove in the fetched objects
  [int $output_encoding_level] // optional filter to decide the level of recursion used to encode the fetched objects
)

The result is the same that you would get when calling the fetch function in a template,
which means in general an array of objects (null is also a valid result).

For module views, the signature is:

mixed $result = ezp.view.$module.$view(
  [struct $options,]              // extra options. supported options:
                                     'return_type' 1 for returning the variables normally passed to the template, 2 for template results
  [array $view_parameters,]       // the ordered parameters, as declared in the view definition in module.php
  [struct $unordered_parameters,] // the unordered parameters, as declared in the view definition in module.php
  [struct $post_parameters]       // any parameters that would have been sent as POST variable
)

The result depends on the value correspoding to the 'return_type' key in the $options parameter:
1 - the webservice will return the variables that are normally passed to the template used to render the view
2 - the webservice will return (as string) the result of executing the template associated with the view
Note that due to the way the eZ Publish kernel works, the view template is always executed even when passing 'return_type' = 1

When using ezjscore protocol, the method names change slightly and become:
ezp::view::collaboration::view
ezp::operation::content::hide
etc...

To pass nested parameters, the json format is used, so that calls look like the following:
<root>/ezjscore/call/ezp::fetch::content::list::{"parent_node_id":2}
<root>/ezjscore/call/ezp::view::content::view::{}::["full", 2]
<root>/ezjscore/call/ezp::operation::user::preferences::{"key":"a_new_key","value":123}


Signature of the three generic webservices:

mixed $result = ezp.fetchall(
  string $module,              // name of the module
  string $fetch_function,      // name of the fetch function
  [struct $params,]            // where all the (named) parameters for the fetch functions are stored
  [array $output_filter,]      // optional filter to decide which fields to remove in the fetched objects
  [int $output_encoding_level] // optional filter to decide the level of recursion used to encode the fetched objects
)

mixed $result = ezp.viewall(
  string $module,                 // name of the module
  string $fetch_function,         // name of the fetch function
  [struct $options,]              // extra options. supported options:
                                     'return_type' 1 for returning the variables normally passed to the template, 2 for template results (default is 1)
  [array $view_parameters,]       // the ordered parameters, as declared in the view definition in module.php
  [struct $unordered_parameters,] // the unordered parameters, as declared in the view definition in module.php
  [struct $post_parameters]       // any parameters that would have been sent as POST variable
)

mixed $result = ezp.operationall(
  string $module,              // name of the module
  string $operation,           // name of the operation
  [struct $params]             // where all the (named) parameters for the operations are stored
)

These webservices  are meant to give a role a single permission that will allow
him to execute any view or fetch function.
In the future there will be support for allowing a user to call ezp.viewall and
let the extension check if he has access to the actual module/view being executed.

The URLs to be used to access the webservices are:

http://ezp.server/etc/index.php/siteaccess/webservices/execute/jsonrpc
http://ezp.server/etc/index.php/siteaccess/webservices/execute/xmlrpc
http://ezp.server/etc/index.php/siteaccess/ezjscore/call

(alternatively, some optimized controller file can be put in place. Read the
documentation of ggwebservices for more details)

The ggwebservices extension includes a graphical debugger that can be used to
discover / test the new webservices. It is available in the Administration
Interface of eZ Publish in the 'WS Debugger' tab.

Last but not least: the list of existing module views, operations and fetch functions
is cached by this extension, so that it has not to be recalculated upon every invocation
of a webservice. After activating extensions, this cache should be rebuilt, for
the new views, operations and fetch functions (if any) to appear as websevices.
- if running on eZ Publish 4.3 or later, this can be done in the administration interface
- if running on eZ Publish 4.2 or later, the directory
  var/siteaccess/cache/ezwebservicesapi
  will have to be cleaned by hand


Troubleshooting
===============
For more documentation look under doc/
